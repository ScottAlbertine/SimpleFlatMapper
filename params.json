{"name":"Simpleflatmapper","tagline":"Fast and Easy mapping from database and csv to POJO. A lightweight alternative to iBatis and Hibernate.","body":"[![Build Status](https://travis-ci.org/arnaudroger/SimpleFlatMapper.svg?branch=master)](https://travis-ci.org/arnaudroger/SimpleFlatMapper)\r\n[![Coverage Status](https://img.shields.io/coveralls/arnaudroger/SimpleFlatMapper.svg)](https://coveralls.io/r/arnaudroger/SimpleFlatMapper)\r\n\r\n# Simple Flat Mapper (SFM) [v1.3.0](https://github.com/arnaudroger/SimpleFlatMapper/wiki/SimpleFlatMapper-v1.3.0)\r\n\r\nSFM provides fast and easy to use mapper for\r\n\r\n- [ResultSet aka micro ORM](https://github.com/arnaudroger/SimpleFlatMapper/wiki/JdbcMapper)\r\n- [Csv](src/main/java/org/sfm/csv)\r\n- [Jooq](src/main/java/org/sfm/jooq)\r\n- [SpringJdbcTemplate](src/main/java/org/sfm/jdbc/spring)\r\n- [QueryDSL](src/main/java/org/sfm/querydsl)\r\n\r\nIt also provides one of the fastest [csv parser](https://github.com/arnaudroger/SimpleFlatMapper/wiki/CsvParser) available [See CsvParserComparaison fork](https://github.com/arnaudroger/csv-parsers-comparison).\r\n\r\nThe API is lambda friendly and the java 8 jars expose the mapped in form of Stream.\r\n\r\n## Why?\r\n\r\nSFM focuses on simplicity of use and performance. Current ORM Mapping solution are intrusive and/or quite slow -\r\ncan easily double your retrieval time in prod like setups, and Hibernate cache won't save you either because it\r\nstill needs to inflate the object from a tuple.\r\n\r\nSFM is a library and does not force a framework on you it plugs on top of jdbc, jooq, java io, spring jdbc.\r\n\r\nSFM makes also the assumption that it should be able to figure out the mapping rule without you being explicit about it.\r\nObject will most of the time match the structure of a query or a csv. But it still allow you to customized the mapping\r\ndefinition. [More details.](https://github.com/arnaudroger/SimpleFlatMapper/wiki/Property-Mapping)\r\n\r\nSFM also supports Constructor injection and respect the semantic of final fields.\r\n\r\n[More storyfied Why.](https://github.com/arnaudroger/SimpleFlatMapper/wiki/Why-extended-version)\r\n\r\n## How Fast?\r\n\r\nThe Jdbc Mapper is the fastest on the market. Adding a maximum of 5% over pure jdbc on a query to a local Mysql. The next\r\nfastest would be Roma that add between 10 and 15%. MyBatis and Hibernate adds more that 70% climbing quickly to 150%\r\nfor bigger queries.\r\n\r\nThe Csv Mapper is about 30% faster than jackson-csv.\r\n\r\nThe Jooq integration give you a mapping to object for almost no cost.\r\n\r\n[More details.](https://github.com/arnaudroger/SimpleFlatMapper/wiki/Performance-Java-7)\r\n\r\n## Getting Started\r\n\r\n### Binaries\r\n\r\nThe binaries are available in maven central. There is a build for\r\n\r\n#### Java 8\r\n\r\n```xml\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.github.arnaudroger</groupId>\r\n\t\t\t<artifactId>simpleFlatMapper</artifactId>\r\n\t\t\t<version>1.3.0</version>\r\n\t\t</dependency>\r\n```\r\n\r\n#### Java 7\r\n\r\n```xml\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.github.arnaudroger</groupId>\r\n\t\t\t<artifactId>simpleFlatMapper</artifactId>\r\n\t\t\t<version>1.3.0</version>\r\n\t\t\t<classifier>jdk17</classifier>\r\n\t\t</dependency>\r\n```\r\n\r\n#### Java 6\r\n\r\n```xml\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.github.arnaudroger</groupId>\r\n\t\t\t<artifactId>simpleFlatMapper</artifactId>\r\n\t\t\t<version>1.3.0</version>\r\n\t\t\t<classifier>jdk16</classifier>\r\n\t\t</dependency>\r\n```\r\n\r\n### Quick Samples\r\n\r\nThe mapper are all thread safe, and it is recommended to instantiate one per class to map as most of the work is done on\r\ninstantiation.\r\n\r\nThose samples show how to build a list from the forEach method. These is not the recommended way of processing the\r\nstream of data. As much as you can you would need to define your own RowHandler and do the work in there.\r\n\r\n#### Jdbc\r\n\r\n```java\r\npublic class MyDao {\r\n\tJdbcMapper<MyObject> mapper = JdbcMapperFactory.newInstance().newMapper(MyObject.class);\r\n\r\n\tpublic List<MyObject> findAll() throws SQLException {\r\n\t\ttry (Connection conn = getConnection();\r\n\t\t     PreparedStatement ps = conn.prepareStatement(\"select * from my_table\");\r\n\t\t     ResultSet rs = ps.executeQuery();) {\r\n\t\t\treturn mapper.forEach(rs, new ListHandler<MyObject>()).getList();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n```\r\n\r\n#### Csv\r\n\r\n```java\r\npublic class MyDao {\r\n\tCsvMapper<MyObject> mapper = CsvMapperFactory.newInstance().newMapper(MyObject.class);\r\n\r\n\tpublic List<MyObject> findAll(File file) throws SQLException {\r\n\t\ttry (FileReader reader = new FileReader(file)) {\r\n\t\t\treturn mapper.forEach(reader, new ListHandler<MyObject>()).getList();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n```\r\n\r\n### Building it\r\n\r\nThe build is using [Maven](http://maven.apache.org/).\r\n\r\n```\r\ngit clone https://github.com/arnaudroger/SimpleFlatMapper.git\r\ncd SimpleFlatMapper\r\nmvn install\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}